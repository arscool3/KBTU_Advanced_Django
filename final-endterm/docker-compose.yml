version: "3.8"
services:
  kafka_service:
    restart: on-failure
    image: wurstmeister/kafka
    container_name: kafka_service
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka_service:9093, OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_NUM_PARTITIONS: 3
    hostname: kafka_service
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

  #  kafka-ui:
  #    image: "provectuslabs/kafka-ui:latest"
  #    container_name: kafka-ui
  #    ports:
  #      - "8080:8080"
  #    depends_on:
  #      - zookeeper
  #    environment:
  #      - KAFKA_CLUSTERS_0_NAME=local
  #      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka_service:9093

  zookeeper:
    restart: on-failure
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  postgres:
    restart: on-failure
    image: postgres
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: postgres

  celery:
    restart: always
    build:
      context: ./celery_worker
      dockerfile: Dockerfile
    container_name: celery
    command: celery -A core.tasks worker --loglevel=info -Q calculations --concurrency=5
    volumes:
      - ./celery_worker:/celery
    environment:
      CELERY_BROKER: "redis://redis:6379/3"
      CELERY_RESULT_BACKEND: "redis://redis:6379/3"
      POSTGRES_URL: "postgresql://postgres:postgres@postgres:5432/postgres"
      REDIS_HOST: "redis"
    depends_on:
      - postgres
      - redis

  celery_2:
    restart: always
    build:
      context: ./celery_worker
      dockerfile: Dockerfile
    container_name: celery2
    command: celery -A core.tasks worker --loglevel=info -Q calculations --concurrency=5
    volumes:
      - ./celery_worker:/celery
    environment:
      CELERY_BROKER: "redis://redis:6379/3"
      CELERY_RESULT_BACKEND: "redis://redis:6379/3"
      POSTGRES_URL: "postgresql://postgres:postgres@postgres:5432/postgres"
      REDIS_HOST: "redis"
    depends_on:
      - postgres
      - redis

  # DO NOT NEED ANY MORE
  #  celery_server:
  #    restart: on-failure
  #    build:
  #      context: ./celery_worker
  #      dockerfile: Dockerfile
  #    container_name: celery_server
  #    environment:
  #      HOST: "0.0.0.0"
  #      PORT: "8888"
  #      CELERY_BROKER: "redis://redis:6379/0"
  #    volumes:
  #      - ./celery_worker:/celery
  #    ports:
  #      - "8888:8888"
  #    depends_on:
  #      - celery

  redis:
    restart: always
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  api_server:
    restart: always
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api_server
    ports:
      - "80:8000"
    env_file:
      - ./api/.env
    depends_on:
      - postgres
    volumes:
      - ./api:/app

  producer:
    restart: always
    build:
      context: ./producer
      dockerfile: Dockerfile
    container_name: producer
    environment:
      DEFAULT_TOPIC: "traffic_data"
      KAFKA_BOOTSTRAP: "kafka_service:9093"
      SLEEP_TIME: 0.1
    depends_on:
      - kafka_service

  consumer:
    restart: always
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer
    environment:
      DEFAULT_TOPIC: "traffic_data"
      KAFKA_BOOTSTRAP: "kafka_service:9093"
      #      CELERY_SERVER: "http://celery_server:8888"
      CELERY_BROKER: "redis://redis:6379/3"
      CELERY_RESULT_BACKEND: "redis://redis:6379/3"
    depends_on:
      - kafka_service
      - celery

  consumer2:
    restart: always
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer2
    environment:
      DEFAULT_TOPIC: "traffic_data"
      KAFKA_BOOTSTRAP: "kafka_service:9093"
      #      CELERY_SERVER: "http://celery_server:8888"
      CELERY_BROKER: "redis://redis:6379/3"
      CELERY_RESULT_BACKEND: "redis://redis:6379/3"
    depends_on:
      - kafka_service
      - celery

  consumer3:
    restart: always
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer3
    environment:
      DEFAULT_TOPIC: "traffic_data"
      KAFKA_BOOTSTRAP: "kafka_service:9093"
      #      CELERY_SERVER: "http://celery_server:8888"
      CELERY_BROKER: "redis://redis:6379/3"
      CELERY_RESULT_BACKEND: "redis://redis:6379/3"
    depends_on:
      - kafka_service
      - celery

volumes:
  postgres_data:
  redis_data: