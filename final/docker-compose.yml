version: "3"

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # kafka:
  #   image: obsidiandynamics/kafka
  #   container_name: kafka
  #   restart: "no"
  #   ports:
  #     - "2181:2181"
  #     - "9093:9093"
  #   environment:
  #     KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9093"
  #     KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9093"
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
  #     KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
  #     KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
  #     KAFKA_RESTART_ATTEMPTS: "10"
  #     KAFKA_RESTART_DELAY: "5"
  #     ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
  #   healthcheck:
  #     test: nc -z localhost 29092 || exit
  #     interval: 10s
  #     timeout: 5s
  #     retries: 15

  # kafka-ui:
  #   image: provectuslabs/kafka-ui:latest
  #   container_name: kafka-ui
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     - kafka
  #   environment:
  #     - KAFKA_CLUSTERS_0_NAME=local
  #     - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:29092
      
  db_postgres:
    image: postgres:14-alpine
    ports:
      - 5433:5432
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    container_name: delivery-service-postgres
    environment:
      - POSTGRES_PASSWORD=Dimash2003
      - POSTGRES_USER=postgres
      - POSTGRES_DB=delivery_service
  
  redis:
    container_name: delivery-service-redis
    image: redis:7
    ports:
      - "6379:6379"
  
  auth_service:
    build:
      context: ./AuthenticationService
    restart: on-failure
    depends_on:
      - db_postgres
      - redis
    container_name: delivery-service-auth_service
    ports:
      - 8000:8000

  customer_service:
    build: 
      context: ./CustomerService
    restart: on-failure
    command: sh -c "uvicorn main:app --reload --host 0.0.0.0 --port 8000"
    depends_on:
      - db_postgres
    container_name: delivery-service-customer_service
  
  courier_service:
    build: 
      context: ./CourierService
    restart: on-failure
    command: sh -c "uvicorn main:app --reload --host 0.0.0.0 --port 8000"    
    depends_on:
      - db_postgres
    container_name: delivery-service-courier_service

  restaurant_service:
    build: 
      context: ./RestaurantService
    restart: on-failure
    command: sh -c "./start.sh"
    depends_on:
      - db_postgres
    container_name: delivery-service-restaurant_service

  email_service:
    build:
      context: ./EmailService
    restart: on-failure
    command: sh -c "./start.sh"
    depends_on:
      - redis
    container_name: delivery-service-email_service
    ports:
      - 5555:5555

  notification_service:
    build:
      context: ./NotificationService
    restart: on-failure
    command: sh -c "./start.sh"
    depends_on:
      - auth_service
    container_name: delivery-service-notification_service

volumes:
  pg_data: { }
