version: "3"

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093, OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      - zookeeper
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9093
      
  db_postgres:
    image: postgres:14-alpine
    ports:
      - 5433:5432
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    container_name: delivery-service-postgres
    environment:
      - POSTGRES_PASSWORD=Dimash2003
      - POSTGRES_USER=postgres
      - POSTGRES_DB=delivery_service
  
  redis:
    container_name: delivery-service-redis
    image: redis:7
    ports:
      - "6379:6379"
  
  auth_service:
    build:
      context: ./AuthenticationService
    restart: on-failure
    depends_on:
      - db_postgres
      - redis
    container_name: delivery-service-auth_service
    ports:
      - 8000:8000

  customer_service:
    build: 
      context: ./CustomerService
    restart: on-failure
    command: sh -c "uvicorn main:app --reload --host 0.0.0.0 --port 8000"
    depends_on:
      - db_postgres
    container_name: delivery-service-customer_service
  
  courier_service:
    build: 
      context: ./CourierService
    restart: on-failure
    command: sh -c "uvicorn main:app --reload --host 0.0.0.0 --port 8000"    
    depends_on:
      - db_postgres
    container_name: delivery-service-courier_service

  restaurant_service:
    build: 
      context: ./RestaurantService
    restart: on-failure
    command: sh -c "./start.sh"
    depends_on:
      - db_postgres
    container_name: delivery-service-restaurant_service

  email_service:
    build:
      context: ./EmailService
    restart: on-failure
    command: sh -c "./start.sh"
    depends_on:
      - redis
    container_name: delivery-service-email_service
    ports:
      - 5555:5555

  notification_service:
    build:
      context: ./NotificationService
    restart: on-failure
    command: sh -c "./start.sh"
    depends_on:
      - auth_service
    container_name: delivery-service-notification_service

volumes:
  pg_data: { }
